#!/bin/bash

# Env
export LC_ALL="C.UTF-8"
function cwd () {
	SCRIPT_DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
        echo $SCRIPT_DIR
}
PRUN=$(cwd)
PRUN_NAME="tool"
PROOT=$(realpath "$PRUN/..")

# Default values
. $PRUN/.env

# Define usage function
usage() {
    echo "Usage: $1 [OPTIONS] [COMMAND]"
    echo "Utility script for Hetzner + Proxmox Ansible installation."
    echo ""
    echo "Options:"
    echo "  -p <PLAYBOOK>   Path to playbook file (default: playbook.yml)"
    echo "  -c <ANSIBLE_CFG>   Path to config file (default: ansible.cfg)"
    echo "  -i <INVENTORY>  Path to inventory file (default: inventory/hosts)"
    echo "  -l <LIMIT>  Limit inventory to a specific host id (default: $DEFAULT_HOST)"
    echo "  -v, -vv, -vvv, ...  Increase verbosity level"
    echo "  --skip-tags <TAGS>  Comma-separated list of tags to skip"
    echo "  --tags <TAGS>   Comma-separated list of tags to run"
    echo "  --nh <0|1> Launch script with nohup(1) or not(0)"
    echo ""
    echo "Commands:"
    echo "  _TST_  Use test.yml playbook and skip 'skip' tags"
    echo "  _RSC_  Use rescue.yml playbook and skip 'skip' tags"
    echo "  _DBG_  Use playbook.yml with 'dbg' tags and skip 'dbg_skip' tags with verbosity level 3"
    echo ""
    echo "Examples:"
    echo "  . $1                    # Run playbook.yml with default settings"
    echo "  . $1 _TST_              # Run test.yml with default settings"
    echo "  . $1 _RSC_ --nh 0 && . $1 -vvv   # Run rescue.yml in same thread and after run main playbook with verbosity level 1 and NOHUP activated"
}

# Override variables with args
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        _TST_)
        PPLAY="$PRUN_NAME/$TEST_YML"
        PSKIP_TAGS="skip"
        shift
        ;;
        _RSC_)
        PPLAY="$PRUN_NAME/rescue.yml"
        PSKIP_TAGS="skip"
        shift
        ;;
        _DBG_)
        PTAGS="dbg"
        PSKIP_TAGS="dbg_skip"
        PVERBOSE="-vvv"
        shift
        ;;
        -p)
        PPLAY="$2"
        shift
        shift
        ;;
        -c)
        PCONF="$2"
        shift
        shift
        ;;
        -i)
        PINV="$2"
        shift
        shift
        ;;
        -l)
        PLIMIT="$2"
        shift
        shift
        ;;
        -v*)
        PVERBOSE="$1"
        shift
        ;;
        --skip-tags)
        PSKIP_TAGS="$2"
        shift
        shift
        ;;
        --tags)
        PTAGS="$2"
        shift
        shift
        ;;
        --nh)
        PNOHUP="$2"
        shift
        shift
        ;;
        *)
        echo "Unknown argument: $key"
        usage "run"
        return 1
        ;;
    esac
done

# Create argument strings
get_arg() { [[ -n "$2" ]] && echo "$1 $2"; }
get_arg1() { [[ -n "$2" ]] && echo "$1"; }
get_arg3() { [[ -n "$2" ]] && echo "$1 $3"; }
PARG_PLAY="$PROOT/$PPLAY"
PARG_CONF=$(get_arg1 "env ANSIBLE_CONFIG=$PROOT/$PCONF" "$PCONF")
PARG_INV=$(get_arg3 "-i" "$PINV" "$PROOT/$PINV")
PARG_LIMIT=$(get_arg "-l" "$PLIMIT")
PARG_SKIP_TAGS=$(get_arg "--skip-tags" "$PSKIP_TAGS")
PARG_TAGS=$(get_arg "--tags" "$PTAGS")
PARG_VERBOSE="$PVERBOSE"

# Invoke ansible-playbook
rm -rf $PLOG

echo
echo "******************* Ansible Hosts ********************"
echo
CMD="$PARG_CONF ansible-playbook $PARG_PLAY $PARG_INV $PARG_LIMIT $PARG_SKIP_TAGS $PARG_TAGS $PARG_VERBOSE --list-hosts | tee -a $PLOG"
echo $CMD
bash -c "$CMD"

echo
echo "******************* Ansible Tasks Plan ********************"
echo
CMD="$PARG_CONF ansible-playbook $PARG_PLAY $PARG_INV $PARG_LIMIT $PARG_SKIP_TAGS $PARG_TAGS $PARG_VERBOSE --list-tasks | tee -a $PLOG"
echo $CMD
bash -c "$CMD"

echo
echo "******************* Ansible RUN ********************"
echo
CMD="$PARG_CONF ansible-playbook $PARG_PLAY $PARG_INV $PARG_LIMIT $PARG_SKIP_TAGS $PARG_TAGS $PARG_VERBOSE"
echo $CMD
if [[ "$PNOHUP" == "1" ]]; then
  nohup bash -c "$CMD" > $PLOG &
  sleep 1
  tail -f $PLOG
else
  bash -c "$CMD | tee -a $PLOG"
fi
